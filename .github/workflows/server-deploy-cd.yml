name: CI/CD Pipeline

on:
  push:
    branches: ["*"]  # 모든 브랜치에서 실행
  pull_request:
    branches: ["*"]  # 모든 브랜치에서 실행

jobs:
  ci:
    name: CI - Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.yml
        run: |
          mkdir ./src/main/resources
          touch ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_YML }}" >> ./src/main/resources/application.yml
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: application.yml
          path: ./src/main/resources/application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build/libs/*.jar

  cd:
    name: CD - Docker & Deploy
    needs: ci  # CI 완료 후 실행
    if: github.ref == 'refs/heads/main'  # main 브랜치에서만 실행
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: build/libs

#      - name: Make application.yml
#        run: |
#          mkdir ./src/main/resources
#          touch ./src/main/resources/application.yml
#          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
#        shell: bash

      - name: Docker build & push
        run: |
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker build -f Dockerfile --build-arg JAR_FILE=${{ secrets.JAR_FILE }} --build-arg PORT=${{ secrets.DOCKERFILE_PORT }} -t ${{ secrets.DOCKER_HUB_REPO }} .
          docker push ${{ secrets.DOCKER_HUB_REPO }}

      - name: Deploy Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USERNAME }}
          password: ${{ secrets.NCP_SERVER_PASSWORD }}
          port: ${{ secrets.NCP_SERVER_PORT }}
          script: |
            echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_HUB_REPO }}
            sudo docker-compose up -d

            sudo docker image prune -f